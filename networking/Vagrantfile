# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

    # Provider: virtualbox
  config.vm.define :gw do |gw|
    gw.vm.box = 'centos/7'
    gw.vm.network "private_network", ip: "192.168.192.192", virtualbox__intnet: true
    gw.vm.provider "virtualbox" do |v|
      v.name = "gw"
      v.memory = 512
      v.cpus = 1
    end
    gw.vm.provision 'shell', run: 'always' do |s|
      s.inline = "
        echo -e '****\nPlease wait, configuring the GW ...\n\n'
        ipf_file='/proc/sys/net/ipv4/ip_forward'
        grep 1 $ipf_file >/dev/null || echo 1 > $ipf_file && echo 'IP Forwarding was disabled, ENABLED'
        iptables -L POSTROUTING -t nat | grep MASQ || iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE && echo 'NAT was disabled, ENABLED'
        echo -e '***\tDone!\t****\n\n';
      "
    end
  end

  config.vm.define :client1 do |client1|
    client1.vm.box = 'centos/7'
    client1.vm.network "private_network", ip: "192.168.192.2", virtualbox__intnet: true
    client1.vm.provider "virtualbox" do |v|
      v.name = "client1"
      v.memory = 512
      v.cpus = 1
    end
    client1.vm.provision 'shell', run: 'always' do |s|
      s.inline = "
        echo -e '****\nPlease wait, configuring the Client ...\n\n'
        ip r d default
        ip r a default via 192.168.192.192 dev eth1
        echo -e '***\tDone!\t****\n\n';
      "
    end
  end

  config.vm.define :client2 do |client2|
    client2.vm.box = 'centos/7'
    config.vm.network "private_network", ip: "192.168.192.3", virtualbox__intnet: true
    client2.vm.provider "virtualbox" do |v|
      v.name = "client2"
      v.memory = 512
      v.cpus = 1
    end
    client2.vm.provision 'shell', run: 'always' do |s|
      s.inline = "
        echo -e '****\nPlease wait, configuring the Client ...\n\n'
        ip r d default
        ip r a default via 192.168.192.192 dev eth1
        echo -e '***\tDone!\t****\n\n';
      "
    end
  end
end

